# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `backport` gem.
# Please instead update this file by running `bin/tapioca gem backport`.

module Backport
  class << self
    def logger; end
    def prepare_interval(period, &block); end
    def prepare_stdio_server(adapter: T.unsafe(nil)); end
    def prepare_tcp_server(host: T.unsafe(nil), port: T.unsafe(nil), adapter: T.unsafe(nil)); end
    def run(&block); end
    def stop; end

    private

    def machines; end
  end
end

class Backport::Adapter
  def initialize(output, remote = T.unsafe(nil)); end

  def close; end
  def closed?; end
  def closing; end
  def opening; end
  def receiving(data); end
  def remote; end
  def write(data); end
  def write_line(data); end
end

class Backport::Client
  include ::Observable

  def initialize(input, output, adapter, remote = T.unsafe(nil)); end

  def adapter; end
  def run; end
  def start; end
  def stop; end
  def stopped?; end
  def tick; end

  private

  def make_adapter(mod_cls, remote); end
  def mutex; end
  def read; end
  def read_input; end
  def run_input_thread; end
end

class Backport::Machine
  def initialize; end

  def prepare(server); end
  def run; end
  def servers; end
  def stop; end
  def stopped?; end
  def update(server); end

  private

  def mutex; end
  def run_server_thread; end
end

module Backport::Server; end

class Backport::Server::Base
  include ::Observable

  def start; end
  def started?; end
  def starting; end
  def stop; end
  def stopped?; end
  def stopping; end
  def tick; end
end

module Backport::Server::Connectable
  def clients; end
  def starting; end
  def stopping; end

  private

  def mutex; end
end

class Backport::Server::Interval < ::Backport::Server::Base
  def initialize(period, &block); end

  def starting; end
  def tick; end

  private

  def run_ready_thread; end
end

class Backport::Server::Stdio < ::Backport::Server::Base
  include ::Backport::Server::Connectable

  def initialize(input: T.unsafe(nil), output: T.unsafe(nil), adapter: T.unsafe(nil)); end

  def update(client); end
end

class Backport::Server::Tcpip < ::Backport::Server::Base
  include ::Backport::Server::Connectable

  def initialize(host: T.unsafe(nil), port: T.unsafe(nil), adapter: T.unsafe(nil), socket_class: T.unsafe(nil)); end

  def accept; end
  def starting; end
  def stopping; end
  def update(client); end

  private

  def socket; end
  def start_accept_thread; end
end

Backport::VERSION = T.let(T.unsafe(nil), String)
