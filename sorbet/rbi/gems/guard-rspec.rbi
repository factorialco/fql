# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/guard-rspec/all/guard-rspec.rbi
#
# guard-rspec-4.7.3

module Guard
end
class Guard::RSpec < Guard::Plugin
  def _throw_if_failed; end
  def initialize(options = nil); end
  def options; end
  def options=(arg0); end
  def reload; end
  def run_all; end
  def run_on_modifications(paths); end
  def runner; end
  def runner=(arg0); end
  def start; end
end
module Guard::RSpec::Options
  def self._deep_merge(hash1, hash2); end
  def self.with_defaults(options = nil); end
end
class Guard::RSpec::Deprecator
  def _deprecated(message); end
  def _exclude_option; end
  def _focus_on_failed_option; end
  def _keep_failed_option; end
  def _spec_opts_env; end
  def _use_cmd_option; end
  def _version_option; end
  def initialize(options = nil); end
  def options; end
  def options=(arg0); end
  def self.warns_about_deprecated_options(options = nil); end
  def warns_about_deprecated_options; end
end
class Guard::RSpecDefaults
end
module Guard::RSpec::Inspectors
end
class Guard::RSpec::Inspectors::BaseInspector
  def _clean(paths); end
  def _collect_files(pattern); end
  def _paths_with_chdir(paths, chdir); end
  def _select_only_spec_dirs(paths); end
  def _select_only_spec_files(paths); end
  def _spec_paths_with_chdir; end
  def failed(_locations); end
  def initialize(options = nil); end
  def options; end
  def options=(arg0); end
  def paths(_paths); end
  def reload; end
  def spec_paths; end
  def spec_paths=(arg0); end
end
class Guard::RSpec::Inspectors::SimpleInspector < Guard::RSpec::Inspectors::BaseInspector
  def failed(_locations); end
  def paths(paths); end
  def reload; end
end
class Guard::RSpec::Inspectors::KeepingInspector < Guard::RSpec::Inspectors::BaseInspector
  def _location_path(location); end
  def _with_failed_locations(paths); end
  def failed(locations); end
  def failed_locations; end
  def failed_locations=(arg0); end
  def initialize(options = nil); end
  def paths(paths); end
  def reload; end
end
class Guard::RSpec::Inspectors::FocusedInspector < Guard::RSpec::Inspectors::BaseInspector
  def failed(locations); end
  def focused_locations; end
  def focused_locations=(arg0); end
  def initialize(options = nil); end
  def paths(paths); end
  def reload; end
end
class Guard::RSpec::Inspectors::Factory
  def self.create(options = nil); end
  def self.new(*arg0); end
end
class Guard::RSpec::Command < String
  def _cmd_include_formatter?; end
  def _guard_formatter; end
  def _parts; end
  def _paths(options); end
  def _rspec_formatters; end
  def _visual_formatter; end
  def initialize(paths, options = nil); end
  def options; end
  def options=(arg0); end
  def paths; end
  def paths=(arg0); end
end
class Guard::RSpec::Notifier
  def _image(failure_count, pending_count); end
  def _parse_summary(summary); end
  def _priority(image); end
  def initialize(options = nil); end
  def notify(summary); end
  def notify_failure; end
  def options; end
  def options=(arg0); end
end
class Guard::RSpec::Results
  def failed_paths; end
  def initialize(filename); end
  def summary; end
end
class Guard::RSpec::Results::InvalidData < RuntimeError
end
class Guard::RSpec::RSpecProcess
  def _read_results; end
  def _really_run; end
  def _run; end
  def _warn_unless_absolute_path(formatter_tmp_file); end
  def _with_desired_bundler_env; end
  def all_green?; end
  def command; end
  def exit_code; end
  def formatter_tmp_file; end
  def initialize(command, formatter_tmp_file, options = nil); end
  def options; end
  def results; end
end
class Guard::RSpec::RSpecProcess::Failure < RuntimeError
end
class Guard::RSpec::Runner
  def _open_launchy; end
  def _really_run(cmd, options); end
  def _results_file(results_file, chdir); end
  def _run(paths, options, &block); end
  def initialize(options = nil); end
  def inspector; end
  def inspector=(arg0); end
  def notifier; end
  def notifier=(arg0); end
  def options; end
  def options=(arg0); end
  def reload; end
  def run(paths); end
  def run_all; end
end
class Guard::RSpec::Runner::NoCmdOptionError < RuntimeError
  def initialize; end
end
